using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab3
{
    class Program
    {
        static void Main(string[] args)
        {
            string choice = string.Empty;

            while (choice.ToLower() != "q") // Checks for choice NOT equal to "q" or "Q"
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Please choose an activity:");
                Console.ForegroundColor = ConsoleColor.White;
                Console.WriteLine("  A. Making change");
                Console.WriteLine("  B. Counting letters");
                Console.WriteLine("  C. Number guessing game");
                Console.WriteLine("  D. Quit");
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.Write("Your choice: ");
                Console.ForegroundColor = ConsoleColor.Cyan;
                choice = Console.ReadLine();
                Console.ForegroundColor = ConsoleColor.White;
                // Test for answer and queue correct method
                switch (choice)
                {
                    case "A": case "a":
                        MakingChange();
                        break;
                    case "B": case "b":
                        CountingLetters();
                        break;
                    case "C": case "c":
                        NumberGuessingGame();
                        break;                     
                }
            }
        }

        private static void MakingChange()
        {
            string due = string.Empty;
            string paid = string.Empty;
            decimal dueAmount = 0;
            decimal paidAmount = 0;
            // infinite loop for valid user input, only breaks when correct
            while (true)
            {
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.Write("Please enter the amount due: ");
                Console.ForegroundColor = ConsoleColor.Cyan;
                due = Console.ReadLine();
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.Write("Please enter the amount paid: ");
                Console.ForegroundColor = ConsoleColor.Cyan;
                paid = Console.ReadLine();
                Console.ForegroundColor = ConsoleColor.White;
                // test for valid input and break
                if (decimal.TryParse(due, out decimal result1) && decimal.TryParse(paid, out decimal result2))
                {
                    dueAmount = decimal.Parse(due);
                    paidAmount = decimal.Parse(paid);
                    break;
                }
                else
                {
                    Console.WriteLine("Both inputs must be decimal type. Please try again.");
                }
            }
            // If paid less than due, tell user
            if (paidAmount < dueAmount)
            {
                Console.WriteLine("You did not pay enough.");
            }
            // if paid equal to due, tell user
            else if (paidAmount == dueAmount)
            {
                Console.WriteLine("No change due.");
            }
            // else, calculate change
            else
            {
                decimal change = paidAmount - dueAmount;
                decimal changedue = change;
                decimal[] denominations = { 100M, 50M, 20M, 10M, 5M, 1M, 0.50M, 0.25M, 0.10M, 0.05M, 0.01M };
                int[] counts = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                int index = 0;

                while (change > 0)
                {
                    if (change >= denominations[index])
                    {
                        counts[index] += 1;
                        change -= denominations[index];
                    }
                    else
                    {
                        index += 1;
                    }
                }
                // Output change due
                Console.WriteLine("The following change is due: {0:C}", changedue);
                for (int i = 0; i < counts.Length; ++i)
                {
                    if (counts[i] > 0)
                    {
                        Console.WriteLine("{0,9:C}:  {1}", denominations[i], counts[i]); // string formatting to make output nice
                    }
                }
            }
        }

        private static void CountingLetters()
        {
            Console.ForegroundColor = ConsoleColor.Magenta;
            Console.Write("Please enter text to analyze: ");
            Console.ForegroundColor = ConsoleColor.Cyan;
            string input = Console.ReadLine();
            Console.ForegroundColor = ConsoleColor.White;
            //char[] vowels = { 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u' };
            int consonantsCount = 0, vowelsCount = 0, digitsCount = 0, punctuationCount = 0, symbolsCount = 0, whitespaceCount = 0, unknownCount = 0;

            // Output length
            Console.WriteLine("The text contains {0} characters with the following characteristics:", input.Length);


            // Cycle through chars in string to count
            foreach (char c in input)
            {
                if (Char.IsDigit(c))
                {
                    digitsCount += 1;
                }
                else if (Char.IsSymbol(c))
                {
                    symbolsCount += 1;
                }
                else if (Char.IsPunctuation(c))
                {
                    punctuationCount += 1;
                }
                else if (Char.IsWhiteSpace(c))
                {
                    whitespaceCount += 1;
                }
                else if (Char.IsLetter(c))
                {
                    if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) // figure out better way to do this; foreach (char v in vowels) ...
                    {
                        vowelsCount += 1;
                    }
                    else
                    {
                        consonantsCount += 1;
                    }
                }
                else
                {
                    unknownCount += 1;
                }
            }
            Console.WriteLine("{0,4} consonants", consonantsCount);
            Console.WriteLine("{0,4} vowels", vowelsCount);
            Console.WriteLine("{0,4} digits", digitsCount); //done
            Console.WriteLine("{0,4} punctuation", punctuationCount); //done
            Console.WriteLine("{0,4} symbols", symbolsCount); //done
            Console.WriteLine("{0,4} whitespace", whitespaceCount); //done
            Console.WriteLine("{0,4} unknown characters", unknownCount);
        }

        private static void NumberGuessingGame()
        {
            Random rnd = new Random();
            int target = rnd.Next(100) + 1;
            int guess = 0;
            int count = 0;
            //Console.WriteLine("Cheat answer: {0}", target);
            do
            {
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.Write("Enter a number between 1 and 100: ");
                Console.ForegroundColor = ConsoleColor.Cyan;
                string input = Console.ReadLine();
                Console.ForegroundColor = ConsoleColor.White;
                // Only consider integers
                if (int.TryParse(input, out guess))
                {
                    count += 1;
                    if (guess > target)
                    {
                        Console.WriteLine("Too high.");
                    }
                    else if (guess < target)
                    {
                        Console.WriteLine("Too low.");
                    }
                }
            } while (guess != target);
            Console.WriteLine("You got it in {0} guesses!", count);
        }
    }
}
